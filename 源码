package deno04.Test;

import java.util.ArrayList;
import java.util.Collections;

/*
    斗地主综合案例分析
    1.准备牌
    2.洗牌
    3.发牌
    4.看牌
 */
public class Doudizhu {
    public static void main(String[] args) {
        //准备牌
        //定义一个存储54张牌的ArrayList集合，泛型使用String
        ArrayList<String> poker = new ArrayList<>();
        //定义两个数组，一个数组存储花色，一个存储序号
        String [] colors = {"♠","♥","♣","♦"};
        String [] numbers = {"2","A","K","Q","J","10","9","8","7","5","5","4","3"};
        //先把大王和小王存储到集合中
        poker.add("大王");
        poker.add("小王");
        //循环嵌套两个数组，组装52张牌
        for (String number:numbers){
            for (String color : colors) {
//                System.out.println(number+color);
                poker.add(color+number);
            }
        }
//        System.out.println(poker);
        /*
        2.洗牌
        使用工具类colltion中的方法
        static void shuffle(List<?> list, Random rnd)
          使用指定的随机源对指定列表进行置换。
         */
        Collections.shuffle(poker);
//        System.out.println(poker);
        /*
        3.发牌
        定义四个集合，存储玩家的牌和底牌
         */
        ArrayList<String> player1 = new ArrayList<>();
        ArrayList<String> player2 = new ArrayList<>();
        ArrayList<String> player3 = new ArrayList<>();
        ArrayList<String> DiPai = new ArrayList<>();
        /*
        遍历poker集合，获取每一张牌
        使用poker集合索引%3给3个玩家轮流发牌
        剩余三张给底牌
        注意：
            先判断底牌（i>=51）,否则牌就发没了
         */
        for (int i = 0;i<poker.size();i++){
            //获取每一张牌
            String p = poker.get(i);
            //轮流发牌
            if(i>=51){
                //给底牌发牌
               DiPai.add(p);
            }else if (i%3==0){
                //给player1发牌
                player1.add(p);
            }else if (i%3==1){
                //给player2发牌
                player2.add(p);
            }else if (i%3==2){
                //给player3发牌
                player3.add(p);
            }
        }
        /*
        4.看牌
         */
        System.out.println("康康"+player1);
        System.out.println("佳佳"+player2);
        System.out.println("凯凯"+player3);
        System.out.println("最后"+DiPai);

    }

}
